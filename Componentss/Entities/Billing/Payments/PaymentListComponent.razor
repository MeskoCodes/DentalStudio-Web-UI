@using MudBlazor
@inherits PaymentFormViewModel
@inject IPaymentService PaymentService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@using Contract.Billing
@using System.Collections.ObjectModel

<MudTable Class="ml-4 mt-4 mr-4" Elevation="4" Items="@Payments" Dense Hover="true" Bordered="false"
          Loading="@Loading" Filter="FilterFunc">
    <ToolBarContent>
        <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Tertiary" Variant="Variant.Outlined"
                   style="font-weight: bold;" OnClick="@(() => OpenPaymentForm(new PaymentCreateDto()))">
            Add Payment
        </MudButton>
        <MudSpacer />
        <MudTextField T="string" Label="Search by Method" Variant="Variant.Outlined" @bind-Value="SearchPaymentMethod"
                      Clearable="true" Immediate="true" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Outlined.Search"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh style="color:var(--mud-palette-primary); font-weight: bold;">Payment ID</MudTh>
        <MudTh style="color:var(--mud-palette-primary); font-weight: bold;">Invoice ID</MudTh>
        <MudTh style="color:var(--mud-palette-primary); font-weight: bold;">Amount</MudTh>
        <MudTh style="color:var(--mud-palette-primary); font-weight: bold;">Payment Date</MudTh>
        <MudTh style="color:var(--mud-palette-primary); font-weight: bold;">Method</MudTh>
    </HeaderContent>
    <RowTemplate Context="payment">
        <MudTd DataLabel="Payment ID">@payment.PaymentId</MudTd>
        <MudTd DataLabel="Invoice ID">@payment.InvoiceId</MudTd>
        <MudTd DataLabel="Amount">@payment.Amount.ToString("C")</MudTd>
        <MudTd DataLabel="Payment Date">@payment.PaymentDate.ToShortDateString()</MudTd>
        <MudTd DataLabel="Method">@payment.PaymentMethod</MudTd>
        <MudTd DataLabel="Actions">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary"
                           OnClick="@(() => OpenPaymentForm(new PaymentUpdateDto
                           {
                               PaymentId = payment.PaymentId,
                               Amount = payment.Amount,
                               PaymentMethod = payment.PaymentMethod
                           }))" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary"
                           OnClick="@(() => DeletePayment(payment.PaymentId))" />
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No payments found</MudText>
    </NoRecordsContent>
</MudTable>

@code {
    private ObservableCollection<PaymentDto> Payments = new ObservableCollection<PaymentDto>();
    private bool Loading = true;
    private string SearchPaymentMethod = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadPayments();
    }

    private async Task LoadPayments()
    {
        Loading = true;
        Payments.Clear();  // Očisti prethodne podatke ako je potrebno
        var paymentList = await PaymentService.GetAll();
        foreach (var payment in paymentList)
        {
            Payments.Add(payment);  // Dodaj nove podatke
        }
        Loading = false;
    }

    private bool FilterFunc(PaymentDto payment) =>
        string.IsNullOrWhiteSpace(SearchPaymentMethod) || payment.PaymentMethod.Contains(SearchPaymentMethod, StringComparison.OrdinalIgnoreCase);

    private void OpenPaymentForm(object paymentDto)
    {
        if (paymentDto is PaymentCreateDto createDto)
        {
            // Open the form for creating a new payment
        }
        else if (paymentDto is PaymentUpdateDto updateDto)
        {
            // Open the form for updating an existing payment
        }
    }

    private async Task DeletePayment(int paymentId)
    {
        var confirm = await DialogService.ShowMessageBox(
            "Confirm Delete",
            "Are you sure you want to delete this payment?",
            yesText: "Yes", cancelText: "No");

        if (confirm == true)
        {
            await PaymentService.Delete(paymentId);
            await LoadPayments();
        }
    }
}
